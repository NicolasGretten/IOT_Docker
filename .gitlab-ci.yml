stages:
  - staging-pull
  - staging-build
  - staging-test
  - staging-deploy
  - staging-scan
  - staging-rabbitmq
  - prod-pull
  - prod-address
  - prod-admin
  - prod-api
  - prod-boutique
  - prod-bill
  - prod-cart
  - prod-dashboard
  - prod-employee
  - prod-image
  - prod-mail
  - prod-order
  - prod-product
  - prod-store
  - prod-user
  - prod-payment
  - prod-vitrine
  - prod-rabbitmq
  - proxy
  - proxy-staging

staging-pull-job:
  stage: staging-pull
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - echo "HELLO"
  after_script:
    - cd /home/admin/docker.collect.verything && sudo git reset --hard origin/staging && sudo git pull origin staging

staging_build_address:
  stage: staging-build
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "address/*"
        - "address/*/*"
        - "address/*/*/*"
  environment:
    name: staging
    url: https://staging.api.collectandverything.fr
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/address && sudo cp env/.env.staging .env && sudo -E docker compose build --no-cache

staging_test_address:
  stage: staging-test
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo docker run -d --name address-test-php collectandverything-address:latest
    - sudo docker exec address-test-php /bin/bash -c 'phpcs --standard=PSR12 app/ > output.xml || true'
    - sudo docker exec address-test-php /bin/bash -c 'php artisan test > test.xml || true'
    - sudo docker cp address-test-php:/var/www/output.xml phpcs-address.xml
    - sudo docker cp address-test-php:/var/www/test.xml phpunit-address.xml
  after_script:
    - sudo docker rm -f address-test-php
  artifacts:
    paths:
      - "*.xml"

staging_deploy_address:
  stage: staging-deploy
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/address && sudo -E docker compose up -d

staging_scan_address:
  stage: staging-scan
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo trivy image --severity CRITICAL,HIGH collectandverything-address:latest

staging_build_admin:
  stage: staging-build
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "admin/*"
        - "admin/*/*"
        - "admin/*/*/*"
  environment:
    name: staging
    url: https://staging.api.collectandverything.fr
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/admin && sudo cp env/.env.staging .env && sudo -E docker compose build --no-cache

staging_test_admin:
  stage: staging-test
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo docker run -d --name admin-test-php collectandverything-admin:latest
    - sudo docker exec admin-test-php /bin/bash -c 'phpcs --standard=PSR12 app/ > output.xml || true'
    - sudo docker exec admin-test-php /bin/bash -c 'php artisan test > test.xml || true'
    - sudo docker cp admin-test-php:/var/www/output.xml phpcs-admin.xml
    - sudo docker cp admin-test-php:/var/www/test.xml phpunit-admin.xml
  after_script:
    - sudo docker rm -f admin-test-php
  artifacts:
    paths:
      - "*.xml"

staging_deploy_admin:
  stage: staging-deploy
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/admin && sudo -E docker compose up -d

staging_scan_admin:
  stage: staging-scan
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo trivy image --severity CRITICAL,HIGH collectandverything-admin:latest

staging_build_api:
  stage: staging-build
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "api/*"
        - "api/*/*"
        - "api/*/*/*"
  environment:
    name: staging
    url: https://staging.api.collectandverything.fr
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/api && sudo cp env/.env.staging .env && sudo -E docker compose build --no-cache

staging_test_api:
  stage: staging-test
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo docker run -d --name api-test-php collectandverything-api:latest
    - sudo docker exec api-test-php /bin/bash -c 'phpcs --standard=PSR12 app/ > output.xml || true'
    - sudo docker exec api-test-php /bin/bash -c 'php artisan test > test.xml || true'
    - sudo docker cp api-test-php:/var/www/output.xml phpcs-api.xml
    - sudo docker cp api-test-php:/var/www/test.xml phpunit-api.xml
  after_script:
    - sudo docker rm -f api-test-php
  artifacts:
    paths:
      - "*.xml"

staging_deploy_api:
  stage: staging-deploy
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/api && sudo -E docker compose up -d

staging_scan_api:
  stage: staging-scan
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo trivy image --severity CRITICAL,HIGH collectandverything-api:latest

staging_build_boutique:
  stage: staging-build
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "boutique/*"
        - "boutique/*/*"
        - "boutique/*/*/*"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/boutique && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

staging_build_bill:
  stage: staging-build
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "bill/*"
        - "bill/*/*"
        - "bill/*/*/*"
  environment:
    name: staging
    url: https://staging.bill.collectandverything.fr
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/bill && sudo cp env/.env.staging .env && sudo -E docker compose build --no-cache

staging_test_bill:
  stage: staging-test
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo docker run -d --name bill-test-php collectandverything-bill:latest
    - sudo docker exec bill-test-php /bin/bash -c 'phpcs --standard=PSR12 app/ > output.xml || true'
    - sudo docker exec bill-test-php /bin/bash -c 'php artisan test > test.xml || true'
    - sudo docker cp bill-test-php:/var/www/output.xml phpcs-bill.xml
    - sudo docker cp bill-test-php:/var/www/test.xml phpunit-bill.xml
  after_script:
    - sudo docker rm -f bill-test-php
  artifacts:
    paths:
      - "*.xml"

staging_deploy_bill:
  stage: staging-deploy
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/bill && sudo -E docker compose up -d

staging_scan_bill:
  stage: staging-scan
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo trivy image --severity CRITICAL,HIGH collectandverything-bill:latest

staging_build_cart:
  stage: staging-build
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "cart/*"
        - "cart/*/*"
        - "cart/*/*/*"
  environment:
    name: staging
    url: https://staging.cart.collectandverything.fr
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/cart && sudo cp env/.env.staging .env && sudo -E docker compose build --no-cache

staging_test_cart:
  stage: staging-test
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo docker run -d --name cart-test-php collectandverything-cart:latest
    - sudo docker exec cart-test-php /bin/bash -c 'phpcs --standard=PSR12 app/ > output.xml || true'
    - sudo docker exec cart-test-php /bin/bash -c 'php artisan test > test.xml || true'
    - sudo docker cp cart-test-php:/var/www/output.xml phpcs-cart.xml
    - sudo docker cp cart-test-php:/var/www/test.xml phpunit-cart.xml
  after_script:
    - sudo docker rm -f cart-test-php
  artifacts:
    paths:
      - "*.xml"

staging_deploy_cart:
  stage: staging-deploy
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/cart && sudo -E docker compose up -d

staging_scan_cart:
  stage: staging-scan
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo trivy image --severity CRITICAL,HIGH collectandverything-cart:latest

staging_build_dashboard:
  stage: staging-build
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "dashboard/*"
        - "dashboard/*/*"
        - "dashboard/*/*/*"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/dashboard && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

staging_build_employee:
  stage: staging-build
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "employee/*"
        - "employee/*/*"
        - "employee/*/*/*"
  environment:
    name: staging
    url: https://staging.employee.collectandverything.fr
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/employee && sudo cp env/.env.staging .env && sudo -E docker compose build --no-cache

staging_test_employee:
  stage: staging-test
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo docker run -d --name employee-test-php collectandverything-employee:latest
    - sudo docker exec employee-test-php /bin/bash -c 'phpcs --standard=PSR12 app/ > output.xml || true'
    - sudo docker exec employee-test-php /bin/bash -c 'php artisan test > test.xml || true'
    - sudo docker cp employee-test-php:/var/www/output.xml phpcs-employee.xml
    - sudo docker cp employee-test-php:/var/www/test.xml phpunit-employee.xml
  after_script:
    - sudo docker rm -f employee-test-php
  artifacts:
    paths:
      - "*.xml"

staging_deploy_employee:
  stage: staging-deploy
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/employee && sudo -E docker compose up -d

staging_scan_employee:
  stage: staging-scan
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo trivy image --severity CRITICAL,HIGH collectandverything-employee:latest

staging_build_image:
  stage: staging-build
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "image/*"
        - "image/*/*"
        - "image/*/*/*"
  environment:
    name: staging
    url: https://staging.image.collectandverything.fr
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/image && sudo cp env/.env.staging .env && sudo -E docker compose build --no-cache

staging_test_image:
  stage: staging-test
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo docker run -d --name image-test-php collectandverything-image:latest
    - sudo docker exec image-test-php /bin/bash -c 'phpcs --standard=PSR12 app/ > output.xml || true'
    - sudo docker exec image-test-php /bin/bash -c 'php artisan test > test.xml || true'
    - sudo docker cp image-test-php:/var/www/output.xml phpcs-image.xml
    - sudo docker cp image-test-php:/var/www/test.xml phpunit-image.xml
  after_script:
    - sudo docker rm -f image-test-php
  artifacts:
    paths:
      - "*.xml"

staging_deploy_image:
  stage: staging-deploy
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/image && sudo -E docker compose up -d

staging_scan_image:
  stage: staging-scan
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo trivy image --severity CRITICAL,HIGH collectandverything-image:latest

staging_build_mail:
  stage: staging-build
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "mail/*"
        - "mail/*/*"
        - "mail/*/*/*"
  environment:
    name: staging
    url: https://staging.mail.collectandverything.fr
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/mail && sudo cp env/.env.staging .env && sudo -E docker compose build --no-cache

staging_test_mail:
  stage: staging-test
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo docker run -d --name mail-test-php collectandverything-mail:latest
    - sudo docker exec mail-test-php /bin/bash -c 'phpcs --standard=PSR12 app/ > output.xml || true'
    - sudo docker exec mail-test-php /bin/bash -c 'php artisan test > test.xml || true'
    - sudo docker cp mail-test-php:/var/www/output.xml phpcs-mail.xml
    - sudo docker cp mail-test-php:/var/www/test.xml phpunit-mail.xml
  after_script:
    - sudo docker rm -f mail-test-php
  artifacts:
    paths:
      - "*.xml"

staging_deploy_mail:
  stage: staging-deploy
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/mail && sudo -E docker compose up -d

staging_scan_mail:
  stage: staging-scan
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo trivy mail --severity CRITICAL,HIGH collectandverything-mail:latest

staging_build_order:
  stage: staging-build
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "order/*"
        - "order/*/*"
        - "order/*/*/*"
  environment:
    name: staging
    url: https://staging.order.collectandverything.fr
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/order && sudo cp env/.env.staging .env && sudo -E docker compose build --no-cache

staging_test_order:
  stage: staging-test
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo docker run -d --name order-test-php collectandverything-order:latest
    - sudo docker exec order-test-php /bin/bash -c 'phpcs --standard=PSR12 app/ > output.xml || true'
    - sudo docker exec order-test-php /bin/bash -c 'php artisan test > test.xml || true'
    - sudo docker cp order-test-php:/var/www/output.xml phpcs-order.xml
    - sudo docker cp order-test-php:/var/www/test.xml phpunit-order.xml
  after_script:
    - sudo docker rm -f order-test-php
  artifacts:
    paths:
      - "*.xml"

staging_deploy_order:
  stage: staging-deploy
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/order && sudo -E docker compose up -d

staging_scan_order:
  stage: staging-scan
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo trivy order --severity CRITICAL,HIGH collectandverything-order:latest

staging_build_product:
  stage: staging-build
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "product/*"
        - "product/*/*"
        - "product/*/*/*"
  environment:
    name: staging
    url: https://staging.product.collectandverything.fr
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/product && sudo cp env/.env.staging .env && sudo -E docker compose build --no-cache

staging_test_product:
  stage: staging-test
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo docker run -d --name product-test-php collectandverything-product:latest
    - sudo docker exec product-test-php /bin/bash -c 'phpcs --standard=PSR12 app/ > output.xml || true'
    - sudo docker exec product-test-php /bin/bash -c 'php artisan test > test.xml || true'
    - sudo docker cp product-test-php:/var/www/output.xml phpcs-product.xml
    - sudo docker cp product-test-php:/var/www/test.xml phpunit-product.xml
  after_script:
    - sudo docker rm -f product-test-php
  artifacts:
    paths:
      - "*.xml"

staging_deploy_product:
  stage: staging-deploy
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/product && sudo -E docker compose up -d

staging_scan_product:
  stage: staging-scan
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo trivy product --severity CRITICAL,HIGH collectandverything-product:latest

staging_build_store:
  stage: staging-build
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "store/*"
        - "store/*/*"
        - "store/*/*/*"
  environment:
    name: staging
    url: https://staging.store.collectandverything.fr
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/store && sudo cp env/.env.staging .env && sudo -E docker compose build --no-cache

staging_test_store:
  stage: staging-test
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo docker run -d --name store-test-php collectandverything-store:latest
    - sudo docker exec store-test-php /bin/bash -c 'phpcs --standard=PSR12 app/ > output.xml || true'
    - sudo docker exec store-test-php /bin/bash -c 'php artisan test > test.xml || true'
    - sudo docker cp store-test-php:/var/www/output.xml phpcs-store.xml
    - sudo docker cp store-test-php:/var/www/test.xml phpunit-store.xml
  after_script:
    - sudo docker rm -f store-test-php
  artifacts:
    paths:
      - "*.xml"

staging_deploy_store:
  stage: staging-deploy
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/store && sudo -E docker compose up -d

staging_scan_store:
  stage: staging-scan
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo trivy store --severity CRITICAL,HIGH collectandverything-store:latest

staging_build_user:
  stage: staging-build
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "user/*"
        - "user/*/*"
        - "user/*/*/*"
  environment:
    name: staging
    url: https://staging.user.collectandverything.fr
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/user && sudo cp env/.env.staging .env && sudo -E docker compose build --no-cache

staging_test_user:
  stage: staging-test
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo docker run -d --name user-test-php collectandverything-user:latest
    - sudo docker exec user-test-php /bin/bash -c 'phpcs --standard=PSR12 app/ > output.xml || true'
    - sudo docker exec user-test-php /bin/bash -c 'php artisan test > test.xml || true'
    - sudo docker cp user-test-php:/var/www/output.xml phpcs-user.xml
    - sudo docker cp user-test-php:/var/www/test.xml phpunit-user.xml
  after_script:
    - sudo docker rm -f user-test-php
  artifacts:
    paths:
      - "*.xml"

staging_deploy_user:
  stage: staging-deploy
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/user && sudo -E docker compose up -d

staging_scan_user:
  stage: staging-scan
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo trivy user --severity CRITICAL,HIGH collectandverything-user:latest

staging_build_payment:
  stage: staging-build
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "payment/*"
        - "payment/*/*"
        - "payment/*/*/*"
  environment:
    name: staging
    url: https://staging.payment.collectandverything.fr
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/payment && sudo cp env/.env.staging .env && sudo -E docker compose build --no-cache

staging_test_payment:
  stage: staging-test
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo docker run -d --name payment-test-php collectandverything-payment:latest
    - sudo docker exec payment-test-php /bin/bash -c 'phpcs --standard=PSR12 app/ > output.xml || true'
    - sudo docker exec payment-test-php /bin/bash -c 'php artisan test > test.xml || true'
    - sudo docker cp payment-test-php:/var/www/output.xml phpcs-payment.xml
    - sudo docker cp payment-test-php:/var/www/test.xml phpunit-payment.xml
  after_script:
    - sudo docker rm -f payment-test-php
  artifacts:
    paths:
      - "*.xml"

staging_deploy_payment:
  stage: staging-deploy
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/payment && sudo -E docker compose up -d

staging_scan_payment:
  stage: staging-scan
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
  tags:
    - staging
  script:
    - sudo trivy payment --severity CRITICAL,HIGH collectandverything-payment:latest

staging_build_vitrine:
  stage: staging-build
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "vitrine/*"
        - "vitrine/*/*"
        - "vitrine/*/*/*"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/vitrine && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

staging-rabbitmq-job:
  stage: staging-rabbitmq
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "rabbitmq/*"
        - "rabbitmq/*/*"
        - "rabbitmq/*/*/*"
  tags:
    - staging
  script:
    - cd /home/admin/docker.collect.verything/rabbitmq && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

prod-pull-job:
  stage: prod-pull
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
  tags:
    - production
  script:
    - echo "HELLO"
  after_script:
    - cd /home/admin/docker.collect.verything && sudo git reset --hard origin/production && sudo git pull origin production

prod-address-job:
  stage: prod-address
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "address/*"
        - "address/*/*"
        - "address/*/*/*"
  environment:
    name: production
    url: https://api.collectandverything.fr
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/address && sudo cp env/.env.production .env && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

prod-admin-job:
  stage: prod-admin
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "admin/*"
        - "admin/*/*"
        - "admin/*/*/*"
  environment:
    name: production
    url: https://api.collectandverything.fr
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/admin && sudo cp env/.env.production .env && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

prod-api-job:
  stage: prod-api
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "api/*"
        - "api/*/*"
        - "api/*/*/*"
  environment:
    name: production
    url: https://api.collectandverything.fr
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/api && sudo cp env/.env.production .env && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

prod-boutique-job:
  stage: prod-boutique
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "boutique/*"
        - "boutique/*/*"
        - "boutique/*/*/*"
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/boutique && sudo echo "CI_COMMIT_BRANCH="$CI_COMMIT_BRANCH | sudo tee -a .env && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

prod-bill-job:
  stage: prod-bill
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "bill/*"
        - "bill/*/*"
        - "bill/*/*/*"
  environment:
    name: production
    url: https://api.collectandverything.fr
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/bill && sudo cp env/.env.production .env && sudo -E docker compose build --no-cache && sudo -E docker compose up -d


prod-cart-job:
  stage: prod-cart
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "cart/*"
        - "cart/*/*"
        - "cart/*/*/*"
  environment:
    name: production
    url: https://api.collectandverything.fr
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/cart && sudo cp env/.env.production .env && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

prod-dashboard-job:
  stage: prod-dashboard
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "dashboard/*"
        - "dashboard/*/*"
        - "dashboard/*/*/*"
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/dashboard && sudo echo "CI_COMMIT_BRANCH="$CI_COMMIT_BRANCH | sudo tee -a .env && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

prod-employee-job:
  stage: prod-employee
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "employee/*"
        - "employee/*/*"
        - "employee/*/*/*"
  environment:
    name: production
    url: https://api.collectandverything.fr
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/employee && sudo cp env/.env.production .env && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

prod-image-job:
  stage: prod-image
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "image/*"
        - "image/*/*"
        - "image/*/*/*"
  environment:
    name: production
    url: https://api.collectandverything.fr
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/image && sudo cp env/.env.production .env && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

prod-mail-job:
  stage: prod-mail
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "mail/*"
        - "mail/*/*"
        - "mail/*/*/*"
  environment:
    name: production
    url: https://api.collectandverything.fr
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/mail && sudo cp env/.env.production .env && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

prod-order-job:
  stage: prod-order
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "order/*"
        - "order/*/*"
        - "order/*/*/*"
  environment:
    name: production
    url: https://api.collectandverything.fr
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/order && sudo cp env/.env.production .env && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

prod-product-job:
  stage: prod-product
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "product/*"
        - "product/*/*"
        - "product/*/*/*"
  environment:
    name: production
    url: https://api.collectandverything.fr
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/product && sudo cp env/.env.production .env && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

prod-store-job:
  stage: prod-store
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "store/*"
        - "store/*/*"
        - "store/*/*/*"
  environment:
    name: production
    url: https://api.collectandverything.fr
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/store && sudo cp env/.env.production .env && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

prod-user-job:
  stage: prod-user
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "user/*"
        - "user/*/*"
        - "user/*/*/*"
  environment:
    name: production
    url: https://api.collectandverything.fr
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/user && sudo cp env/.env.production .env && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

prod-payment-job:
  stage: prod-payment
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "payment/*"
        - "payment/*/*"
        - "payment/*/*/*"
  environment:
    name: production
    url: https://api.collectandverything.fr
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/payment && sudo cp env/.env.production .env && sudo -E docker compose build --no-cache && sudo -E docker compose up -d


prod-vitrine-job:
  stage: prod-vitrine
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "vitrine/*"
        - "vitrine/*/*"
        - "vitrine/*/*/*"
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/vitrine && sudo echo "CI_COMMIT_BRANCH="$CI_COMMIT_BRANCH | sudo tee -a .env && sudo -E docker compose build --no-cache && sudo -E docker compose up -d


prod-rabbitmq-job:
  stage: prod-rabbitmq
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "rabbitmq/*"
        - "rabbitmq/*/*"
        - "rabbitmq/*/*/*"
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/rabbitmq && sudo -E docker compose down && sudo -E docker compose build --no-cache && sudo -E docker compose up -d

proxy-job:
  stage: proxy
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "production"
      changes:
        - "proxy/*"
        - "proxy/*/*"
        - "proxy/*/*/*"
  environment:
    name: production
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/proxy && sudo -E docker compose build --no-cache && sudo -E docker compose up -d
  when: manual

proxy-staging-job:
  stage: proxy-staging
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      changes:
        - "proxy-staging/*"
        - "proxy-staging/*/*"
        - "proxy-staging/*/*/*"
  environment:
    name: production
  tags:
    - production
  script:
    - cd /home/admin/docker.collect.verything/proxy-staging && sudo -E docker compose build --no-cache && sudo -E docker compose up -d
  when: manual


after_script:
  - cd /home/admin/docker.collect.verything && sudo docker image prune --force